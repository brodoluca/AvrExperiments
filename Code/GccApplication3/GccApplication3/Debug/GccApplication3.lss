
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000176  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000122  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000176  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000834  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000786  00000000  00000000  00000a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029a  00000000  00000000  000011ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001468  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003de  00000000  00000000  000014d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000085  00000000  00000000  000018ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001933  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__vector_14>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__vector_16>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  7c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  80:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  84:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  88:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  9c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <main>:
#include <avr/interrupt.h>

int main(void)
{
    /* Using timer= and TImer1 interrupts, generate sqaure waves on pins PB1 and PB7 respectively. while transferring data from PORTc and PORTD */
	DDRB |= 0x82;
  a4:	87 b3       	in	r24, 0x17	; 23
  a6:	82 68       	ori	r24, 0x82	; 130
  a8:	87 bb       	out	0x17, r24	; 23
	DDRC = 0x00;
  aa:	14 ba       	out	0x14, r1	; 20
	DDRD = 0xFF;
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	81 bb       	out	0x11, r24	; 17
	
	TCNT0 = -160;
  b0:	80 e6       	ldi	r24, 0x60	; 96
  b2:	82 bf       	out	0x32, r24	; 50
	TCCR0 = 0x01;
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	83 bf       	out	0x33, r24	; 51
	
	TCNT1H = -640>>8;
  b8:	9d ef       	ldi	r25, 0xFD	; 253
  ba:	9d bd       	out	0x2d, r25	; 45
	TCNT1L = -640;
  bc:	90 e8       	ldi	r25, 0x80	; 128
  be:	9c bd       	out	0x2c, r25	; 44
	TCCR1A = 0x00;
  c0:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0x01;
  c2:	8e bd       	out	0x2e, r24	; 46
	
	TIMSK = (1<<TOIE0) | (1<<TOIE1);
  c4:	85 e0       	ldi	r24, 0x05	; 5
  c6:	87 bf       	out	0x37, r24	; 55
	sei();
  c8:	78 94       	sei
	
	while(1)
		PORTD = PORTC;
  ca:	85 b3       	in	r24, 0x15	; 21
  cc:	82 bb       	out	0x12, r24	; 18
  ce:	fd cf       	rjmp	.-6      	; 0xca <main+0x26>

000000d0 <__vector_16>:
}

ISR(TIMER0_OVF_vect){
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	8f 93       	push	r24
  dc:	9f 93       	push	r25
	TCNT0 = -160; //reload
  de:	80 e6       	ldi	r24, 0x60	; 96
  e0:	82 bf       	out	0x32, r24	; 50
	PORTB ^= 0x02; //toggle second port
  e2:	98 b3       	in	r25, 0x18	; 24
  e4:	82 e0       	ldi	r24, 0x02	; 2
  e6:	89 27       	eor	r24, r25
  e8:	88 bb       	out	0x18, r24	; 24
}
  ea:	9f 91       	pop	r25
  ec:	8f 91       	pop	r24
  ee:	0f 90       	pop	r0
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	0f 90       	pop	r0
  f4:	1f 90       	pop	r1
  f6:	18 95       	reti

000000f8 <__vector_14>:
ISR(TIMER1_OVF_vect){
  f8:	1f 92       	push	r1
  fa:	0f 92       	push	r0
  fc:	0f b6       	in	r0, 0x3f	; 63
  fe:	0f 92       	push	r0
 100:	11 24       	eor	r1, r1
 102:	8f 93       	push	r24
	TCNT1H = -640>>8;
 104:	8d ef       	ldi	r24, 0xFD	; 253
 106:	8d bd       	out	0x2d, r24	; 45
	TCNT1L = -640;
 108:	80 e8       	ldi	r24, 0x80	; 128
 10a:	8c bd       	out	0x2c, r24	; 44
	
	PORTB ^= 0x80;
 10c:	88 b3       	in	r24, 0x18	; 24
 10e:	80 58       	subi	r24, 0x80	; 128
 110:	88 bb       	out	0x18, r24	; 24
 112:	8f 91       	pop	r24
 114:	0f 90       	pop	r0
 116:	0f be       	out	0x3f, r0	; 63
 118:	0f 90       	pop	r0
 11a:	1f 90       	pop	r1
 11c:	18 95       	reti

0000011e <_exit>:
 11e:	f8 94       	cli

00000120 <__stop_program>:
 120:	ff cf       	rjmp	.-2      	; 0x120 <__stop_program>
